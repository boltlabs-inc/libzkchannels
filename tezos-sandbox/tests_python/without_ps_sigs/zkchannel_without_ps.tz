parameter (or (or (or (unit %addFunding) (unit %custClaim)) (or (pair %custClose (pair (signature %merchSig) (mutez %newCustBal)) (pair (mutez %newMerchBal) (bytes %revLock))) (unit %merchClaim))) (or (or (unit %merchClose) (bytes %merchDispute)) (or (pair %mutualClose (pair (signature %custSig) (signature %merchSig)) (pair (mutez %newCustBal) (mutez %newMerchBal))) (unit %reclaimFunding))));
storage   (pair (pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))));
code
  {
    DUP;        # pair @parameter @storage : pair @parameter @storage
    CDR;        # @storage : pair @parameter @storage
    SWAP;       # pair @parameter @storage : @storage
    CAR;        # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                DROP;       # @storage
                # == addFunding ==
                # sp.verify(self.data.status == 'awaitingFunding') # @storage
                DUP;        # @storage : @storage
                CDDDDR;     # string : @storage
                PUSH string "awaitingFunding"; # string : string : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.status == 'awaitingFunding'"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # if self.data.custAddr == sp.sender: # @storage
                DUP;        # @storage : @storage
                CAADAR;     # address : @storage
                SENDER;     # address : address : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {
                    # sp.verify(sp.amount == self.data.custFunding) # @storage
                    DUP;        # @storage : @storage
                    CADAR;      # mutez : @storage
                    AMOUNT;     # mutez : mutez : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: sp.amount == self.data.custFunding"; # string : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # self.data.custBal = self.data.custFunding # @storage
                    DUP;        # @storage : @storage
                    DUP;        # @storage : @storage : @storage
                    CDR;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage : @storage
                    SWAP;       # @storage : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                    CAR;        # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                    DUP;        # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                    CDR;        # pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                    SWAP;       # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                    CAR;        # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                    DUP;        # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                    CAR;        # string : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                    SWAP;       # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                    CDAR;       # address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                    DIG 4;      # @storage : address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                    CADAR;      # mutez : address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                    SWAP;       # address : mutez : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                    PAIR;       # pair address mutez : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                    SWAP;       # string : pair address mutez : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                    PAIR;       # pair string (pair address mutez) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                    PAIR;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                    PAIR;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                  }
                  {}; # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                # if self.data.merchAddr == sp.sender: # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                CDAAR;      # address : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                SENDER;     # address : address : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                COMPARE;    # int : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                EQ;         # bool : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                IF
                  {
                    # sp.verify(sp.amount == self.data.merchFunding) # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    CDADDR;     # mutez : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    AMOUNT;     # mutez : mutez : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    COMPARE;    # int : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    EQ;         # bool : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: sp.amount == self.data.merchFunding"; # string : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                        FAILWITH;   # FAILED
                      }; # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    # self.data.merchBal = self.data.merchFunding # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    CAR;        # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    SWAP;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    CDR;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    DUP;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    CDR;        # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    SWAP;       # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    CAR;        # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    DUP;        # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    CAR;        # address : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    SWAP;       # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    CDDR;       # mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    DIG 4;      # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    CDADDR;     # mutez : mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    PAIR;       # pair mutez mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    SWAP;       # address : pair mutez mutez : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    PAIR;       # pair address (pair mutez mutez) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    PAIR;       # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    SWAP;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                    PAIR;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                  }
                  {}; # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                # if (self.data.custBal == self.data.custFunding) & (self.data.merchBal == self.data.merchFunding): # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                CADAR;      # mutez : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                SWAP;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : mutez
                DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : mutez
                DUG 2;      # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : mutez : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                CAADDR;     # mutez : mutez : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                COMPARE;    # int : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                EQ;         # bool : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                IF
                  {
                    DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    CDADDR;     # mutez : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    SWAP;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : mutez
                    DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : mutez
                    DUG 2;      # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : mutez : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    CDADAR;     # mutez : mutez : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    COMPARE;    # int : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    EQ;         # bool : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                  }
                  {
                    PUSH bool False; # bool : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                  }; # bool : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                IF
                  {
                    # self.data.status = 'open' # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    CAR;        # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    SWAP;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    CDR;        # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    DUP;        # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    CAR;        # pair address (pair mutez mutez) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    SWAP;       # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    CDR;        # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    DUP;        # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    CAR;        # pair (key %merchPk) (bytes %revLock) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    SWAP;       # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (key %merchPk) (bytes %revLock) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    CDAR;       # int : pair (key %merchPk) (bytes %revLock) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    PUSH string "open"; # string : int : pair (key %merchPk) (bytes %revLock) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    SWAP;       # int : string : pair (key %merchPk) (bytes %revLock) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    PAIR;       # pair int string : pair (key %merchPk) (bytes %revLock) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    SWAP;       # pair (key %merchPk) (bytes %revLock) : pair int string : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    PAIR;       # pair (pair (key %merchPk) (bytes %revLock)) (pair int string) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    SWAP;       # pair address (pair mutez mutez) : pair (pair (key %merchPk) (bytes %revLock)) (pair int string) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    PAIR;       # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                    SWAP;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string))
                    PAIR;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)))
                  }
                  {}; # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)))
                NIL operation; # list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)))
              }
              {
                DROP;       # @storage
                # == custClaim ==
                # sp.verify(self.data.custAddr == sp.sender) # @storage
                DUP;        # @storage : @storage
                CAADAR;     # address : @storage
                SENDER;     # address : address : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.custAddr == sp.sender"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(self.data.status == 'custClose') # @storage
                DUP;        # @storage : @storage
                CDDDDR;     # string : @storage
                PUSH string "custClose"; # string : string : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.status == 'custClose'"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(self.data.delayExpiry < sp.now) # @storage
                DUP;        # @storage : @storage
                CADDDR;     # timestamp : @storage
                NOW;        # timestamp : timestamp : @storage
                COMPARE;    # int : @storage
                GT;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.delayExpiry < sp.now"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.send(self.data.custAddr, self.data.custBal) # @storage
                DUP;        # @storage : @storage
                CAADAR;     # address : @storage
                CONTRACT unit; # option (contract unit) : @storage
                NIL operation; # list operation : option (contract unit) : @storage
                SWAP;       # option (contract unit) : list operation : @storage
                IF_SOME
                  {}
                  {
                    PUSH int 133; # int : list operation : @storage
                    FAILWITH;   # FAILED
                  }; # @some : list operation : @storage
                DIG 2;      # @storage : @some : list operation
                DUP;        # @storage : @storage : @some : list operation
                DUG 3;      # @storage : @some : list operation : @storage
                CAADDR;     # mutez : @some : list operation : @storage
                UNIT;       # unit : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
                SWAP;       # @storage : list operation
                # self.data.custBal = sp.tez(0) # @storage : list operation
                DUP;        # @storage : @storage : list operation
                CDR;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage : list operation
                SWAP;       # @storage : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                CAR;        # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                DUP;        # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                CDR;        # pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                SWAP;       # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                CAR;        # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                DUP;        # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                CAR;        # string : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                SWAP;       # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                CDAR;       # address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PUSH mutez 0; # mutez : address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                SWAP;       # address : mutez : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PAIR;       # pair address mutez : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                SWAP;       # string : pair address mutez : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PAIR;       # pair string (pair address mutez) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PAIR;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PAIR;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                # self.data.status = 'closed' # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                CAR;        # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                SWAP;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CDR;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                DUP;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CAR;        # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CDR;        # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                DUP;        # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CAR;        # pair (key %merchPk) (bytes %revLock) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (key %merchPk) (bytes %revLock) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CDAR;       # int : pair (key %merchPk) (bytes %revLock) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PUSH string "closed"; # string : int : pair (key %merchPk) (bytes %revLock) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # int : string : pair (key %merchPk) (bytes %revLock) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PAIR;       # pair int string : pair (key %merchPk) (bytes %revLock) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (key %merchPk) (bytes %revLock) : pair int string : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PAIR;       # pair (pair (key %merchPk) (bytes %revLock)) (pair int string) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (key %merchPk) (bytes %revLock)) (pair int string) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PAIR;       # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)) : list operation
                PAIR;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string))) : list operation
                SWAP;       # list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)))
              }; # list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)))
          }
          {
            IF_LEFT
              {
                # == custClose ==
                # sp.verify(self.data.custAddr == sp.sender) # @parameter%custClose : @storage
                SENDER;     # address : @parameter%custClose : @storage
                DIG 2;      # @storage : address : @parameter%custClose
                DUP;        # @storage : @storage : address : @parameter%custClose
                DUG 3;      # @storage : address : @parameter%custClose : @storage
                CAADAR;     # address : address : @parameter%custClose : @storage
                COMPARE;    # int : @parameter%custClose : @storage
                EQ;         # bool : @parameter%custClose : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.custAddr == sp.sender"; # string : @parameter%custClose : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%custClose : @storage
                # sp.verify((self.data.status == 'open') | (self.data.status == 'merchClose')) # @parameter%custClose : @storage
                PUSH string "open"; # string : @parameter%custClose : @storage
                DIG 2;      # @storage : string : @parameter%custClose
                DUP;        # @storage : @storage : string : @parameter%custClose
                DUG 3;      # @storage : string : @parameter%custClose : @storage
                CDDDDR;     # string : string : @parameter%custClose : @storage
                COMPARE;    # int : @parameter%custClose : @storage
                EQ;         # bool : @parameter%custClose : @storage
                IF
                  {
                    PUSH bool True; # bool : @parameter%custClose : @storage
                  }
                  {
                    PUSH string "merchClose"; # string : @parameter%custClose : @storage
                    DIG 2;      # @storage : string : @parameter%custClose
                    DUP;        # @storage : @storage : string : @parameter%custClose
                    DUG 3;      # @storage : string : @parameter%custClose : @storage
                    CDDDDR;     # string : string : @parameter%custClose : @storage
                    COMPARE;    # int : @parameter%custClose : @storage
                    EQ;         # bool : @parameter%custClose : @storage
                  }; # bool : @parameter%custClose : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: (self.data.status == 'open') | (self.data.status == 'merchClose')"; # string : @parameter%custClose : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%custClose : @storage
                SWAP;       # @storage : @parameter%custClose
                # sp.verify((params.newCustBal + params.newMerchBal) == (self.data.custBal + self.data.merchBal)) # @storage : @parameter%custClose
                DUP;        # @storage : @storage : @parameter%custClose
                DUG 2;      # @storage : @parameter%custClose : @storage
                CDADAR;     # mutez : @parameter%custClose : @storage
                DIG 2;      # @storage : mutez : @parameter%custClose
                DUP;        # @storage : @storage : mutez : @parameter%custClose
                DUG 3;      # @storage : mutez : @parameter%custClose : @storage
                CAADDR;     # mutez : mutez : @parameter%custClose : @storage
                ADD;        # mutez : @parameter%custClose : @storage
                SWAP;       # @parameter%custClose : mutez : @storage
                DUP;        # @parameter%custClose : @parameter%custClose : mutez : @storage
                DUG 2;      # @parameter%custClose : mutez : @parameter%custClose : @storage
                CDAR;       # mutez : mutez : @parameter%custClose : @storage
                DIG 2;      # @parameter%custClose : mutez : mutez : @storage
                DUP;        # @parameter%custClose : @parameter%custClose : mutez : mutez : @storage
                DUG 3;      # @parameter%custClose : mutez : mutez : @parameter%custClose : @storage
                CADR;       # mutez : mutez : mutez : @parameter%custClose : @storage
                ADD;        # mutez : mutez : @parameter%custClose : @storage
                COMPARE;    # int : @parameter%custClose : @storage
                EQ;         # bool : @parameter%custClose : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: (params.newCustBal + params.newMerchBal) == (self.data.custBal + self.data.merchBal)"; # string : @parameter%custClose : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%custClose : @storage
                # sp.verify(params.newCustBal >= sp.tez(0)) # @parameter%custClose : @storage
                DUP;        # @parameter%custClose : @parameter%custClose : @storage
                CADR;       # mutez : @parameter%custClose : @storage
                PUSH mutez 0; # mutez : mutez : @parameter%custClose : @storage
                SWAP;       # mutez : mutez : @parameter%custClose : @storage
                COMPARE;    # int : @parameter%custClose : @storage
                GE;         # bool : @parameter%custClose : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: params.newCustBal >= sp.tez(0)"; # string : @parameter%custClose : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%custClose : @storage
                # sp.verify(params.newMerchBal >= sp.tez(0)) # @parameter%custClose : @storage
                DUP;        # @parameter%custClose : @parameter%custClose : @storage
                CDAR;       # mutez : @parameter%custClose : @storage
                PUSH mutez 0; # mutez : mutez : @parameter%custClose : @storage
                SWAP;       # mutez : mutez : @parameter%custClose : @storage
                COMPARE;    # int : @parameter%custClose : @storage
                GE;         # bool : @parameter%custClose : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: params.newMerchBal >= sp.tez(0)"; # string : @parameter%custClose : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%custClose : @storage
                # sp.verify(sp.check_signature(self.data.merchPk, params.merchSig, sp.pack(sp.record(chanID = self.data.chanID, custAddr = self.data.custAddr, merchAddr = self.data.merchAddr, newCustBal = params.newCustBal, newMerchBal = params.newMerchBal, revLock = params.revLock)))) # @parameter%custClose : @storage
                DUP;        # @parameter%custClose : @parameter%custClose : @storage
                CDDR;       # bytes : @parameter%custClose : @storage
                SWAP;       # @parameter%custClose : bytes : @storage
                DUP;        # @parameter%custClose : @parameter%custClose : bytes : @storage
                DUG 2;      # @parameter%custClose : bytes : @parameter%custClose : @storage
                CDAR;       # mutez : bytes : @parameter%custClose : @storage
                PAIR %newMerchBal %revLock; # pair (mutez %newMerchBal) (bytes %revLock) : @parameter%custClose : @storage
                SWAP;       # @parameter%custClose : pair (mutez %newMerchBal) (bytes %revLock) : @storage
                DUP;        # @parameter%custClose : @parameter%custClose : pair (mutez %newMerchBal) (bytes %revLock) : @storage
                DUG 2;      # @parameter%custClose : pair (mutez %newMerchBal) (bytes %revLock) : @parameter%custClose : @storage
                CADR;       # mutez : pair (mutez %newMerchBal) (bytes %revLock) : @parameter%custClose : @storage
                PAIR %newCustBal; # pair (mutez %newCustBal) (pair (mutez %newMerchBal) (bytes %revLock)) : @parameter%custClose : @storage
                DIG 2;      # @storage : pair (mutez %newCustBal) (pair (mutez %newMerchBal) (bytes %revLock)) : @parameter%custClose
                DUP;        # @storage : @storage : pair (mutez %newCustBal) (pair (mutez %newMerchBal) (bytes %revLock)) : @parameter%custClose
                DUG 3;      # @storage : pair (mutez %newCustBal) (pair (mutez %newMerchBal) (bytes %revLock)) : @parameter%custClose : @storage
                CDAAR;      # address : pair (mutez %newCustBal) (pair (mutez %newMerchBal) (bytes %revLock)) : @parameter%custClose : @storage
                DIG 3;      # @storage : address : pair (mutez %newCustBal) (pair (mutez %newMerchBal) (bytes %revLock)) : @parameter%custClose
                DUP;        # @storage : @storage : address : pair (mutez %newCustBal) (pair (mutez %newMerchBal) (bytes %revLock)) : @parameter%custClose
                DUG 4;      # @storage : address : pair (mutez %newCustBal) (pair (mutez %newMerchBal) (bytes %revLock)) : @parameter%custClose : @storage
                CAADAR;     # address : address : pair (mutez %newCustBal) (pair (mutez %newMerchBal) (bytes %revLock)) : @parameter%custClose : @storage
                PAIR %custAddr %merchAddr; # pair (address %custAddr) (address %merchAddr) : pair (mutez %newCustBal) (pair (mutez %newMerchBal) (bytes %revLock)) : @parameter%custClose : @storage
                DIG 3;      # @storage : pair (address %custAddr) (address %merchAddr) : pair (mutez %newCustBal) (pair (mutez %newMerchBal) (bytes %revLock)) : @parameter%custClose
                DUP;        # @storage : @storage : pair (address %custAddr) (address %merchAddr) : pair (mutez %newCustBal) (pair (mutez %newMerchBal) (bytes %revLock)) : @parameter%custClose
                DUG 4;      # @storage : pair (address %custAddr) (address %merchAddr) : pair (mutez %newCustBal) (pair (mutez %newMerchBal) (bytes %revLock)) : @parameter%custClose : @storage
                CAAAR;      # string : pair (address %custAddr) (address %merchAddr) : pair (mutez %newCustBal) (pair (mutez %newMerchBal) (bytes %revLock)) : @parameter%custClose : @storage
                PAIR %chanID; # pair (string %chanID) (pair (address %custAddr) (address %merchAddr)) : pair (mutez %newCustBal) (pair (mutez %newMerchBal) (bytes %revLock)) : @parameter%custClose : @storage
                PAIR;       # pair (pair (string %chanID) (pair (address %custAddr) (address %merchAddr))) (pair (mutez %newCustBal) (pair (mutez %newMerchBal) (bytes %revLock))) : @parameter%custClose : @storage
                PACK;       # bytes : @parameter%custClose : @storage
                SWAP;       # @parameter%custClose : bytes : @storage
                DUP;        # @parameter%custClose : @parameter%custClose : bytes : @storage
                DUG 2;      # @parameter%custClose : bytes : @parameter%custClose : @storage
                CAAR;       # signature : bytes : @parameter%custClose : @storage
                DIG 3;      # @storage : signature : bytes : @parameter%custClose
                DUP;        # @storage : @storage : signature : bytes : @parameter%custClose
                DUG 4;      # @storage : signature : bytes : @parameter%custClose : @storage
                CDDAAR;     # key : signature : bytes : @parameter%custClose : @storage
                CHECK_SIGNATURE; # bool : @parameter%custClose : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.check_signature(self.data.merchPk, params.merchSig, sp.pack(sp.record(chanID = self.data.chanID, custAddr = self.data.custAddr, merchAddr = self.data.merchAddr, newCustBal = params.newCustBal, newMerchBal = params.newMerchBal, revLock = params.revLock)))"; # string : @parameter%custClose : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%custClose : @storage
                SWAP;       # @storage : @parameter%custClose
                # self.data.custBal = params.newCustBal # @storage : @parameter%custClose
                DUP;        # @storage : @storage : @parameter%custClose
                CDR;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage : @parameter%custClose
                SWAP;       # @storage : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                CAR;        # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                DUP;        # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                CDR;        # pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                SWAP;       # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                CAR;        # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                DUP;        # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                CAR;        # string : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                SWAP;       # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                CDAR;       # address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                DIG 4;      # @parameter%custClose : address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                DUP;        # @parameter%custClose : @parameter%custClose : address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                DUG 5;      # @parameter%custClose : address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                CADR;       # mutez : address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                SWAP;       # address : mutez : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                PAIR;       # pair address mutez : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                SWAP;       # string : pair address mutez : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                PAIR;       # pair string (pair address mutez) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                PAIR;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                PAIR;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @parameter%custClose
                # self.data.merchBal = params.newMerchBal # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @parameter%custClose
                DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @parameter%custClose
                CAR;        # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @parameter%custClose
                SWAP;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%custClose
                CDR;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%custClose
                DUP;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%custClose
                CDR;        # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%custClose
                SWAP;       # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%custClose
                CAR;        # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%custClose
                DUP;        # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%custClose
                CAR;        # address : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%custClose
                SWAP;       # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%custClose
                CDDR;       # mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%custClose
                DIG 4;      # @parameter%custClose : mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                DUP;        # @parameter%custClose : @parameter%custClose : mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                DUG 5;      # @parameter%custClose : mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%custClose
                CDAR;       # mutez : mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%custClose
                PAIR;       # pair mutez mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%custClose
                SWAP;       # address : pair mutez mutez : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%custClose
                PAIR;       # pair address (pair mutez mutez) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%custClose
                PAIR;       # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%custClose
                SWAP;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                PAIR;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @parameter%custClose
                # self.data.delayExpiry = sp.add_seconds(sp.now, self.data.selfDelay) # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @parameter%custClose
                DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @parameter%custClose
                DUG 2;      # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @parameter%custClose : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @parameter%custClose : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                CDR;        # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @parameter%custClose : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                SWAP;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                CAR;        # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                DUP;        # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                CAR;        # pair string (pair address mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                SWAP;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair string (pair address mutez) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                CDR;        # pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair string (pair address mutez) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                DUP;        # pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair string (pair address mutez) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                CAR;        # mutez : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair string (pair address mutez) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                SWAP;       # pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : mutez : pair string (pair address mutez) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                CDAR;       # key : mutez : pair string (pair address mutez) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                NOW;        # timestamp : key : mutez : pair string (pair address mutez) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                DIG 6;      # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : timestamp : key : mutez : pair string (pair address mutez) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                CDDDAR;     # int : timestamp : key : mutez : pair string (pair address mutez) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                ADD;        # timestamp : key : mutez : pair string (pair address mutez) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                SWAP;       # key : timestamp : mutez : pair string (pair address mutez) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                PAIR;       # pair key timestamp : mutez : pair string (pair address mutez) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                SWAP;       # mutez : pair key timestamp : pair string (pair address mutez) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                PAIR;       # pair mutez (pair key timestamp) : pair string (pair address mutez) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                SWAP;       # pair string (pair address mutez) : pair mutez (pair key timestamp) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                PAIR;       # pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%custClose
                PAIR;       # pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @parameter%custClose
                # self.data.revLock = params.revLock # pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @parameter%custClose
                DUP;        # pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @parameter%custClose
                CAR;        # pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @parameter%custClose
                SWAP;       # pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : @parameter%custClose
                CDR;        # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : @parameter%custClose
                DUP;        # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : @parameter%custClose
                CAR;        # pair address (pair mutez mutez) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : @parameter%custClose
                SWAP;       # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : @parameter%custClose
                CDR;        # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : @parameter%custClose
                DUP;        # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : @parameter%custClose
                CDR;        # pair (int %selfDelay) (string %status) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : @parameter%custClose
                SWAP;       # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (int %selfDelay) (string %status) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : @parameter%custClose
                CAAR;       # key : pair (int %selfDelay) (string %status) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : @parameter%custClose
                DIG 4;      # @parameter%custClose : key : pair (int %selfDelay) (string %status) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))
                CDDR;       # bytes : key : pair (int %selfDelay) (string %status) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))
                SWAP;       # key : bytes : pair (int %selfDelay) (string %status) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))
                PAIR;       # pair key bytes : pair (int %selfDelay) (string %status) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))
                PAIR;       # pair (pair key bytes) (pair (int %selfDelay) (string %status)) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))
                SWAP;       # pair address (pair mutez mutez) : pair (pair key bytes) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))
                PAIR;       # pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))
                SWAP;       # pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status)))
                PAIR;       # pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))))
                # sp.send(self.data.merchAddr, self.data.merchBal) # pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))))
                DUP;        # pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))))
                CDAAR;      # address : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))))
                CONTRACT unit; # option (contract unit) : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))))
                NIL operation; # list operation : option (contract unit) : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))))
                SWAP;       # option (contract unit) : list operation : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))))
                IF_SOME
                  {}
                  {
                    PUSH int 110; # int : list operation : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))))
                    FAILWITH;   # FAILED
                  }; # @some : list operation : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))))
                DIG 2;      # pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status)))) : @some : list operation
                DUP;        # pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status)))) : @some : list operation
                DUG 3;      # pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status)))) : @some : list operation : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))))
                CDADAR;     # mutez : @some : list operation : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))))
                UNIT;       # unit : mutez : @some : list operation : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))))
                TRANSFER_TOKENS; # operation : list operation : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))))
                CONS;       # list operation : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))))
                SWAP;       # pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status)))) : list operation
                # self.data.merchBal = sp.tez(0) # pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status)))) : list operation
                DUP;        # pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status)))) : list operation
                CAR;        # pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status)))) : list operation
                SWAP;       # pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status)))) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                CDR;        # pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                DUP;        # pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))) : pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                CDR;        # pair (pair key bytes) (pair (int %selfDelay) (string %status)) : pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                SWAP;       # pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))) : pair (pair key bytes) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                CAR;        # pair address (pair mutez mutez) : pair (pair key bytes) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                DUP;        # pair address (pair mutez mutez) : pair address (pair mutez mutez) : pair (pair key bytes) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                CAR;        # address : pair address (pair mutez mutez) : pair (pair key bytes) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                SWAP;       # pair address (pair mutez mutez) : address : pair (pair key bytes) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                CDDR;       # mutez : address : pair (pair key bytes) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                PUSH mutez 0; # mutez : mutez : address : pair (pair key bytes) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                PAIR;       # pair mutez mutez : address : pair (pair key bytes) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                SWAP;       # address : pair mutez mutez : pair (pair key bytes) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                PAIR;       # pair address (pair mutez mutez) : pair (pair key bytes) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                PAIR;       # pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                SWAP;       # pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))) : list operation
                PAIR;       # pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status)))) : list operation
                # self.data.status = 'custClose' # pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status)))) : list operation
                DUP;        # pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status)))) : list operation
                CAR;        # pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status)))) : list operation
                SWAP;       # pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status)))) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                CDR;        # pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                DUP;        # pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))) : pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                CAR;        # pair address (pair mutez mutez) : pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                SWAP;       # pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair (int %selfDelay) (string %status))) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                CDR;        # pair (pair key bytes) (pair (int %selfDelay) (string %status)) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                DUP;        # pair (pair key bytes) (pair (int %selfDelay) (string %status)) : pair (pair key bytes) (pair (int %selfDelay) (string %status)) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                CAR;        # pair key bytes : pair (pair key bytes) (pair (int %selfDelay) (string %status)) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                SWAP;       # pair (pair key bytes) (pair (int %selfDelay) (string %status)) : pair key bytes : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                CDAR;       # int : pair key bytes : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                PUSH string "custClose"; # string : int : pair key bytes : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                SWAP;       # int : string : pair key bytes : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                PAIR;       # pair int string : pair key bytes : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                SWAP;       # pair key bytes : pair int string : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                PAIR;       # pair (pair key bytes) (pair int string) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                SWAP;       # pair address (pair mutez mutez) : pair (pair key bytes) (pair int string) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                PAIR;       # pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair int string)) : pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : list operation
                SWAP;       # pair (pair string (pair address mutez)) (pair mutez (pair key timestamp)) : pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair int string)) : list operation
                PAIR;       # pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair int string))) : list operation
                SWAP;       # list operation : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair int string)))
              }
              {
                DROP;       # @storage
                # == merchClaim ==
                # sp.verify(self.data.merchAddr == sp.sender) # @storage
                DUP;        # @storage : @storage
                CDAAR;      # address : @storage
                SENDER;     # address : address : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.merchAddr == sp.sender"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(self.data.status == 'merchClose') # @storage
                DUP;        # @storage : @storage
                CDDDDR;     # string : @storage
                PUSH string "merchClose"; # string : string : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.status == 'merchClose'"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(self.data.delayExpiry < sp.now) # @storage
                DUP;        # @storage : @storage
                CADDDR;     # timestamp : @storage
                NOW;        # timestamp : timestamp : @storage
                COMPARE;    # int : @storage
                GT;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.delayExpiry < sp.now"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.send(self.data.merchAddr, self.data.custBal + self.data.merchBal) # @storage
                DUP;        # @storage : @storage
                CDAAR;      # address : @storage
                CONTRACT unit; # option (contract unit) : @storage
                NIL operation; # list operation : option (contract unit) : @storage
                SWAP;       # option (contract unit) : list operation : @storage
                IF_SOME
                  {}
                  {
                    PUSH int 76; # int : list operation : @storage
                    FAILWITH;   # FAILED
                  }; # @some : list operation : @storage
                DIG 2;      # @storage : @some : list operation
                DUP;        # @storage : @storage : @some : list operation
                DUG 3;      # @storage : @some : list operation : @storage
                CDADAR;     # mutez : @some : list operation : @storage
                DIG 3;      # @storage : mutez : @some : list operation
                DUP;        # @storage : @storage : mutez : @some : list operation
                DUG 4;      # @storage : mutez : @some : list operation : @storage
                CAADDR;     # mutez : mutez : @some : list operation : @storage
                ADD;        # mutez : @some : list operation : @storage
                UNIT;       # unit : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
                SWAP;       # @storage : list operation
                # self.data.custBal = sp.tez(0) # @storage : list operation
                DUP;        # @storage : @storage : list operation
                CDR;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage : list operation
                SWAP;       # @storage : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                CAR;        # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                DUP;        # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                CDR;        # pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                SWAP;       # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                CAR;        # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                DUP;        # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                CAR;        # string : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                SWAP;       # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                CDAR;       # address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PUSH mutez 0; # mutez : address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                SWAP;       # address : mutez : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PAIR;       # pair address mutez : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                SWAP;       # string : pair address mutez : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PAIR;       # pair string (pair address mutez) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PAIR;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PAIR;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                # self.data.merchBal = sp.tez(0) # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                CAR;        # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                SWAP;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CDR;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                DUP;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CDR;        # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CAR;        # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                DUP;        # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CAR;        # address : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CDDR;       # mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PUSH mutez 0; # mutez : mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PAIR;       # pair mutez mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # address : pair mutez mutez : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PAIR;       # pair address (pair mutez mutez) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PAIR;       # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PAIR;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                # self.data.status = 'closed' # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                CAR;        # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                SWAP;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CDR;        # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                DUP;        # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CAR;        # pair address (pair mutez mutez) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CDR;        # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                DUP;        # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CAR;        # pair (key %merchPk) (bytes %revLock) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (key %merchPk) (bytes %revLock) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CDAR;       # int : pair (key %merchPk) (bytes %revLock) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PUSH string "closed"; # string : int : pair (key %merchPk) (bytes %revLock) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # int : string : pair (key %merchPk) (bytes %revLock) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PAIR;       # pair int string : pair (key %merchPk) (bytes %revLock) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (key %merchPk) (bytes %revLock) : pair int string : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PAIR;       # pair (pair (key %merchPk) (bytes %revLock)) (pair int string) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair address (pair mutez mutez) : pair (pair (key %merchPk) (bytes %revLock)) (pair int string) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PAIR;       # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)) : list operation
                PAIR;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string))) : list operation
                SWAP;       # list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)))
              }; # list operation : pair (pair (pair string (pair address mutez)) (pair mutez (pair key timestamp))) (pair (pair address (pair mutez mutez)) (pair (pair key bytes) (pair int string)))
          }; # list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                DROP;       # @storage
                # == merchClose ==
                # sp.verify(self.data.merchAddr == sp.sender) # @storage
                DUP;        # @storage : @storage
                CDAAR;      # address : @storage
                SENDER;     # address : address : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.merchAddr == sp.sender"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(self.data.status == 'open') # @storage
                DUP;        # @storage : @storage
                CDDDDR;     # string : @storage
                PUSH string "open"; # string : string : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.status == 'open'"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # self.data.delayExpiry = sp.add_seconds(sp.now, self.data.selfDelay) # @storage
                DUP;        # @storage : @storage
                DUP;        # @storage : @storage : @storage
                CDR;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage : @storage
                SWAP;       # @storage : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                CAR;        # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                DUP;        # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                CAR;        # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                SWAP;       # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                CDR;        # pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                DUP;        # pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                CAR;        # mutez : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                SWAP;       # pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : mutez : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                CDAR;       # key : mutez : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                NOW;        # timestamp : key : mutez : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage
                DIG 5;      # @storage : timestamp : key : mutez : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                CDDDAR;     # int : timestamp : key : mutez : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                ADD;        # timestamp : key : mutez : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                SWAP;       # key : timestamp : mutez : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                PAIR;       # pair key timestamp : mutez : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                SWAP;       # mutez : pair key timestamp : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                PAIR;       # pair mutez (pair key timestamp) : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                SWAP;       # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair mutez (pair key timestamp) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                PAIR;       # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                PAIR;       # pair (pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                # self.data.status = 'merchClose' # pair (pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                DUP;        # pair (pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                CAR;        # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp)) : pair (pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                SWAP;       # pair (pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))
                CDR;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))
                DUP;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))
                CAR;        # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))
                SWAP;       # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))
                CDR;        # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))
                DUP;        # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))
                CAR;        # pair (key %merchPk) (bytes %revLock) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))
                SWAP;       # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (key %merchPk) (bytes %revLock) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))
                CDAR;       # int : pair (key %merchPk) (bytes %revLock) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))
                PUSH string "merchClose"; # string : int : pair (key %merchPk) (bytes %revLock) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))
                SWAP;       # int : string : pair (key %merchPk) (bytes %revLock) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))
                PAIR;       # pair int string : pair (key %merchPk) (bytes %revLock) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))
                SWAP;       # pair (key %merchPk) (bytes %revLock) : pair int string : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))
                PAIR;       # pair (pair (key %merchPk) (bytes %revLock)) (pair int string) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))
                SWAP;       # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (key %merchPk) (bytes %revLock)) (pair int string) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))
                PAIR;       # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))
                SWAP;       # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string))
                PAIR;       # pair (pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)))
                NIL operation; # list operation : pair (pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)))
              }
              {
                # == merchDispute ==
                # sp.verify(self.data.merchAddr == sp.sender) # @parameter%merchDispute : @storage
                SENDER;     # address : @parameter%merchDispute : @storage
                DIG 2;      # @storage : address : @parameter%merchDispute
                DUP;        # @storage : @storage : address : @parameter%merchDispute
                DUG 3;      # @storage : address : @parameter%merchDispute : @storage
                CDAAR;      # address : address : @parameter%merchDispute : @storage
                COMPARE;    # int : @parameter%merchDispute : @storage
                EQ;         # bool : @parameter%merchDispute : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.merchAddr == sp.sender"; # string : @parameter%merchDispute : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%merchDispute : @storage
                # sp.verify(self.data.status == 'custClose') # @parameter%merchDispute : @storage
                PUSH string "custClose"; # string : @parameter%merchDispute : @storage
                DIG 2;      # @storage : string : @parameter%merchDispute
                DUP;        # @storage : @storage : string : @parameter%merchDispute
                DUG 3;      # @storage : string : @parameter%merchDispute : @storage
                CDDDDR;     # string : string : @parameter%merchDispute : @storage
                COMPARE;    # int : @parameter%merchDispute : @storage
                EQ;         # bool : @parameter%merchDispute : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.status == 'custClose'"; # string : @parameter%merchDispute : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%merchDispute : @storage
                # sp.verify(self.data.revLock == sp.sha256(params.secret)) # @parameter%merchDispute : @storage
                SHA256;    # bytes : @storage
                SWAP;       # @storage : bytes
                DUP;        # @storage : @storage : bytes
                DUG 2;      # @storage : bytes : @storage
                CDDADR;     # bytes : bytes : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.revLock == sp.sha256(params.secret)"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.send(self.data.merchAddr, self.data.custBal) # @storage
                DUP;        # @storage : @storage
                CDAAR;      # address : @storage
                CONTRACT unit; # option (contract unit) : @storage
                NIL operation; # list operation : option (contract unit) : @storage
                SWAP;       # option (contract unit) : list operation : @storage
                IF_SOME
                  {}
                  {
                    PUSH int 122; # int : list operation : @storage
                    FAILWITH;   # FAILED
                  }; # @some : list operation : @storage
                DIG 2;      # @storage : @some : list operation
                DUP;        # @storage : @storage : @some : list operation
                DUG 3;      # @storage : @some : list operation : @storage
                CAADDR;     # mutez : @some : list operation : @storage
                UNIT;       # unit : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
                SWAP;       # @storage : list operation
                # self.data.custBal = sp.tez(0) # @storage : list operation
                DUP;        # @storage : @storage : list operation
                CDR;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage : list operation
                SWAP;       # @storage : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                CAR;        # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                DUP;        # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                CDR;        # pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                SWAP;       # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                CAR;        # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                DUP;        # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                CAR;        # string : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                SWAP;       # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                CDAR;       # address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PUSH mutez 0; # mutez : address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                SWAP;       # address : mutez : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PAIR;       # pair address mutez : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                SWAP;       # string : pair address mutez : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PAIR;       # pair string (pair address mutez) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PAIR;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PAIR;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                # self.data.status = 'closed' # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                CAR;        # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                SWAP;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CDR;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                DUP;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CAR;        # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CDR;        # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                DUP;        # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CAR;        # pair (key %merchPk) (bytes %revLock) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (key %merchPk) (bytes %revLock) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CDAR;       # int : pair (key %merchPk) (bytes %revLock) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PUSH string "closed"; # string : int : pair (key %merchPk) (bytes %revLock) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # int : string : pair (key %merchPk) (bytes %revLock) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PAIR;       # pair int string : pair (key %merchPk) (bytes %revLock) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (key %merchPk) (bytes %revLock) : pair int string : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PAIR;       # pair (pair (key %merchPk) (bytes %revLock)) (pair int string) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (key %merchPk) (bytes %revLock)) (pair int string) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PAIR;       # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)) : list operation
                PAIR;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string))) : list operation
                SWAP;       # list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)))
              }; # list operation : pair (pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)))
          }
          {
            IF_LEFT
              {
                # == mutualClose ==
                # sp.verify(self.data.status == 'open') # @parameter%mutualClose : @storage
                PUSH string "open"; # string : @parameter%mutualClose : @storage
                DIG 2;      # @storage : string : @parameter%mutualClose
                DUP;        # @storage : @storage : string : @parameter%mutualClose
                DUG 3;      # @storage : string : @parameter%mutualClose : @storage
                CDDDDR;     # string : string : @parameter%mutualClose : @storage
                COMPARE;    # int : @parameter%mutualClose : @storage
                EQ;         # bool : @parameter%mutualClose : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.status == 'open'"; # string : @parameter%mutualClose : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%mutualClose : @storage
                # sp.verify(sp.check_signature(self.data.custPk, params.custSig, sp.pack(sp.record(chanID = self.data.chanID, custAddr = self.data.custAddr, merchAddr = self.data.merchAddr, newCustBal = params.newCustBal, newMerchBal = params.newMerchBal)))) # @parameter%mutualClose : @storage
                DUP;        # @parameter%mutualClose : @parameter%mutualClose : @storage
                CDDR;       # mutez : @parameter%mutualClose : @storage
                SWAP;       # @parameter%mutualClose : mutez : @storage
                DUP;        # @parameter%mutualClose : @parameter%mutualClose : mutez : @storage
                DUG 2;      # @parameter%mutualClose : mutez : @parameter%mutualClose : @storage
                CDAR;       # mutez : mutez : @parameter%mutualClose : @storage
                PAIR %newCustBal %newMerchBal; # pair (mutez %newCustBal) (mutez %newMerchBal) : @parameter%mutualClose : @storage
                DIG 2;      # @storage : pair (mutez %newCustBal) (mutez %newMerchBal) : @parameter%mutualClose
                DUP;        # @storage : @storage : pair (mutez %newCustBal) (mutez %newMerchBal) : @parameter%mutualClose
                DUG 3;      # @storage : pair (mutez %newCustBal) (mutez %newMerchBal) : @parameter%mutualClose : @storage
                CDAAR;      # address : pair (mutez %newCustBal) (mutez %newMerchBal) : @parameter%mutualClose : @storage
                PAIR %merchAddr; # pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal)) : @parameter%mutualClose : @storage
                DIG 2;      # @storage : pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal)) : @parameter%mutualClose
                DUP;        # @storage : @storage : pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal)) : @parameter%mutualClose
                DUG 3;      # @storage : pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal)) : @parameter%mutualClose : @storage
                CAADAR;     # address : pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal)) : @parameter%mutualClose : @storage
                DIG 3;      # @storage : address : pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal)) : @parameter%mutualClose
                DUP;        # @storage : @storage : address : pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal)) : @parameter%mutualClose
                DUG 4;      # @storage : address : pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal)) : @parameter%mutualClose : @storage
                CAAAR;      # string : address : pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal)) : @parameter%mutualClose : @storage
                PAIR %chanID %custAddr; # pair (string %chanID) (address %custAddr) : pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal)) : @parameter%mutualClose : @storage
                PAIR;       # pair (pair (string %chanID) (address %custAddr)) (pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal))) : @parameter%mutualClose : @storage
                PACK;       # bytes : @parameter%mutualClose : @storage
                SWAP;       # @parameter%mutualClose : bytes : @storage
                DUP;        # @parameter%mutualClose : @parameter%mutualClose : bytes : @storage
                DUG 2;      # @parameter%mutualClose : bytes : @parameter%mutualClose : @storage
                CAAR;       # signature : bytes : @parameter%mutualClose : @storage
                DIG 3;      # @storage : signature : bytes : @parameter%mutualClose
                DUP;        # @storage : @storage : signature : bytes : @parameter%mutualClose
                DUG 4;      # @storage : signature : bytes : @parameter%mutualClose : @storage
                CADDAR;     # key : signature : bytes : @parameter%mutualClose : @storage
                CHECK_SIGNATURE; # bool : @parameter%mutualClose : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.check_signature(self.data.custPk, params.custSig, sp.pack(sp.record(chanID = self.data.chanID, custAddr = self.data.custAddr, merchAddr = self.data.merchAddr, newCustBal = params.newCustBal, newMerchBal = params.newMerchBal)))"; # string : @parameter%mutualClose : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%mutualClose : @storage
                # sp.verify(sp.check_signature(self.data.merchPk, params.merchSig, sp.pack(sp.record(chanID = self.data.chanID, custAddr = self.data.custAddr, merchAddr = self.data.merchAddr, newCustBal = params.newCustBal, newMerchBal = params.newMerchBal)))) # @parameter%mutualClose : @storage
                DUP;        # @parameter%mutualClose : @parameter%mutualClose : @storage
                CDDR;       # mutez : @parameter%mutualClose : @storage
                SWAP;       # @parameter%mutualClose : mutez : @storage
                DUP;        # @parameter%mutualClose : @parameter%mutualClose : mutez : @storage
                DUG 2;      # @parameter%mutualClose : mutez : @parameter%mutualClose : @storage
                CDAR;       # mutez : mutez : @parameter%mutualClose : @storage
                PAIR %newCustBal %newMerchBal; # pair (mutez %newCustBal) (mutez %newMerchBal) : @parameter%mutualClose : @storage
                DIG 2;      # @storage : pair (mutez %newCustBal) (mutez %newMerchBal) : @parameter%mutualClose
                DUP;        # @storage : @storage : pair (mutez %newCustBal) (mutez %newMerchBal) : @parameter%mutualClose
                DUG 3;      # @storage : pair (mutez %newCustBal) (mutez %newMerchBal) : @parameter%mutualClose : @storage
                CDAAR;      # address : pair (mutez %newCustBal) (mutez %newMerchBal) : @parameter%mutualClose : @storage
                PAIR %merchAddr; # pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal)) : @parameter%mutualClose : @storage
                DIG 2;      # @storage : pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal)) : @parameter%mutualClose
                DUP;        # @storage : @storage : pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal)) : @parameter%mutualClose
                DUG 3;      # @storage : pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal)) : @parameter%mutualClose : @storage
                CAADAR;     # address : pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal)) : @parameter%mutualClose : @storage
                DIG 3;      # @storage : address : pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal)) : @parameter%mutualClose
                DUP;        # @storage : @storage : address : pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal)) : @parameter%mutualClose
                DUG 4;      # @storage : address : pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal)) : @parameter%mutualClose : @storage
                CAAAR;      # string : address : pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal)) : @parameter%mutualClose : @storage
                PAIR %chanID %custAddr; # pair (string %chanID) (address %custAddr) : pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal)) : @parameter%mutualClose : @storage
                PAIR;       # pair (pair (string %chanID) (address %custAddr)) (pair (address %merchAddr) (pair (mutez %newCustBal) (mutez %newMerchBal))) : @parameter%mutualClose : @storage
                PACK;       # bytes : @parameter%mutualClose : @storage
                SWAP;       # @parameter%mutualClose : bytes : @storage
                DUP;        # @parameter%mutualClose : @parameter%mutualClose : bytes : @storage
                DUG 2;      # @parameter%mutualClose : bytes : @parameter%mutualClose : @storage
                CADR;       # signature : bytes : @parameter%mutualClose : @storage
                DIG 3;      # @storage : signature : bytes : @parameter%mutualClose
                DUP;        # @storage : @storage : signature : bytes : @parameter%mutualClose
                DUG 4;      # @storage : signature : bytes : @parameter%mutualClose : @storage
                CDDAAR;     # key : signature : bytes : @parameter%mutualClose : @storage
                CHECK_SIGNATURE; # bool : @parameter%mutualClose : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.check_signature(self.data.merchPk, params.merchSig, sp.pack(sp.record(chanID = self.data.chanID, custAddr = self.data.custAddr, merchAddr = self.data.merchAddr, newCustBal = params.newCustBal, newMerchBal = params.newMerchBal)))"; # string : @parameter%mutualClose : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%mutualClose : @storage
                SWAP;       # @storage : @parameter%mutualClose
                # self.data.custBal = params.newCustBal # @storage : @parameter%mutualClose
                DUP;        # @storage : @storage : @parameter%mutualClose
                CDR;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage : @parameter%mutualClose
                SWAP;       # @storage : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%mutualClose
                CAR;        # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%mutualClose
                DUP;        # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%mutualClose
                CDR;        # pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%mutualClose
                SWAP;       # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%mutualClose
                CAR;        # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%mutualClose
                DUP;        # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%mutualClose
                CAR;        # string : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%mutualClose
                SWAP;       # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%mutualClose
                CDAR;       # address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%mutualClose
                DIG 4;      # @parameter%mutualClose : address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                DUP;        # @parameter%mutualClose : @parameter%mutualClose : address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                DUG 5;      # @parameter%mutualClose : address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%mutualClose
                CDAR;       # mutez : address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%mutualClose
                SWAP;       # address : mutez : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%mutualClose
                PAIR;       # pair address mutez : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%mutualClose
                SWAP;       # string : pair address mutez : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%mutualClose
                PAIR;       # pair string (pair address mutez) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%mutualClose
                PAIR;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @parameter%mutualClose
                PAIR;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @parameter%mutualClose
                # self.data.merchBal = params.newMerchBal # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @parameter%mutualClose
                DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @parameter%mutualClose
                CAR;        # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @parameter%mutualClose
                SWAP;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%mutualClose
                CDR;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%mutualClose
                DUP;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%mutualClose
                CDR;        # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%mutualClose
                SWAP;       # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%mutualClose
                CAR;        # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%mutualClose
                DUP;        # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%mutualClose
                CAR;        # address : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%mutualClose
                SWAP;       # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%mutualClose
                CDDR;       # mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : @parameter%mutualClose
                DIG 4;      # @parameter%mutualClose : mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                CDDR;       # mutez : mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                PAIR;       # pair mutez mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                SWAP;       # address : pair mutez mutez : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                PAIR;       # pair address (pair mutez mutez) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                PAIR;       # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))
                SWAP;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))
                PAIR;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                # sp.send(self.data.custAddr, self.data.custBal) # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                CAADAR;     # address : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                CONTRACT unit; # option (contract unit) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                NIL operation; # list operation : option (contract unit) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                SWAP;       # option (contract unit) : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                IF_SOME
                  {}
                  {
                    PUSH int 167; # int : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    FAILWITH;   # FAILED
                  }; # @some : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                DIG 2;      # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @some : list operation
                DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @some : list operation
                DUG 3;      # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @some : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                CAADDR;     # mutez : @some : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                UNIT;       # unit : mutez : @some : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                TRANSFER_TOKENS; # operation : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                CONS;       # list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                SWAP;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                # sp.send(self.data.merchAddr, self.data.merchBal) # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                DUG 2;      # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                CDAAR;      # address : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                CONTRACT unit; # option (contract unit) : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                IF_SOME
                  {}
                  {
                    PUSH int 168; # int : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    FAILWITH;   # FAILED
                  }; # @some : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                DIG 2;      # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @some : list operation
                DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @some : list operation
                DUG 3;      # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @some : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                CDADAR;     # mutez : @some : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                UNIT;       # unit : mutez : @some : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                TRANSFER_TOKENS; # operation : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                CONS;       # list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                SWAP;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                # self.data.custBal = sp.tez(0) # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                CDR;        # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                SWAP;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                CAR;        # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                DUP;        # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                CDR;        # pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                SWAP;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                CAR;        # pair string (pair address mutez) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                DUP;        # pair string (pair address mutez) : pair string (pair address mutez) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                CAR;        # string : pair string (pair address mutez) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                SWAP;       # pair string (pair address mutez) : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                CDAR;       # address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PUSH mutez 0; # mutez : address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                SWAP;       # address : mutez : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PAIR;       # pair address mutez : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                SWAP;       # string : pair address mutez : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PAIR;       # pair string (pair address mutez) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PAIR;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PAIR;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                # self.data.merchBal = sp.tez(0) # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                CAR;        # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                SWAP;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CDR;        # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                DUP;        # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CDR;        # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CAR;        # pair address (pair mutez mutez) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                DUP;        # pair address (pair mutez mutez) : pair address (pair mutez mutez) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CAR;        # address : pair address (pair mutez mutez) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair address (pair mutez mutez) : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CDDR;       # mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PUSH mutez 0; # mutez : mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PAIR;       # pair mutez mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # address : pair mutez mutez : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PAIR;       # pair address (pair mutez mutez) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PAIR;       # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                PAIR;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                # self.data.status = 'closed' # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                CAR;        # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                SWAP;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CDR;        # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                DUP;        # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CAR;        # pair address (pair mutez mutez) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CDR;        # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                DUP;        # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CAR;        # pair (key %merchPk) (bytes %revLock) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (key %merchPk) (bytes %revLock) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                CDAR;       # int : pair (key %merchPk) (bytes %revLock) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PUSH string "closed"; # string : int : pair (key %merchPk) (bytes %revLock) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # int : string : pair (key %merchPk) (bytes %revLock) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PAIR;       # pair int string : pair (key %merchPk) (bytes %revLock) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (key %merchPk) (bytes %revLock) : pair int string : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PAIR;       # pair (pair (key %merchPk) (bytes %revLock)) (pair int string) : pair address (pair mutez mutez) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair address (pair mutez mutez) : pair (pair (key %merchPk) (bytes %revLock)) (pair int string) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                PAIR;       # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                SWAP;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)) : list operation
                PAIR;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string))) : list operation
                SWAP;       # list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)))
              }
              {
                # == reclaimFunding ==
                # sp.verify(self.data.status == 'awaitingFunding') # @parameter%reclaimFunding : @storage
                PUSH string "awaitingFunding"; # string : @parameter%reclaimFunding : @storage
                DIG 2;      # @storage : string : @parameter%reclaimFunding
                DUP;        # @storage : @storage : string : @parameter%reclaimFunding
                DUG 3;      # @storage : string : @parameter%reclaimFunding : @storage
                CDDDDR;     # string : string : @parameter%reclaimFunding : @storage
                COMPARE;    # int : @parameter%reclaimFunding : @storage
                EQ;         # bool : @parameter%reclaimFunding : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.status == 'awaitingFunding'"; # string : @parameter%reclaimFunding : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%reclaimFunding : @storage
                # if self.data.custAddr == sp.sender: # @parameter%reclaimFunding : @storage
                SENDER;     # address : @parameter%reclaimFunding : @storage
                DIG 2;      # @storage : address : @parameter%reclaimFunding
                DUP;        # @storage : @storage : address : @parameter%reclaimFunding
                DUG 3;      # @storage : address : @parameter%reclaimFunding : @storage
                CAADAR;     # address : address : @parameter%reclaimFunding : @storage
                COMPARE;    # int : @parameter%reclaimFunding : @storage
                EQ;         # bool : @parameter%reclaimFunding : @storage
                IF
                  {
                    SWAP;       # @storage : @parameter%reclaimFunding
                    # sp.verify(self.data.custBal == self.data.custFunding) # @storage : @parameter%reclaimFunding
                    DUP;        # @storage : @storage : @parameter%reclaimFunding
                    DUG 2;      # @storage : @parameter%reclaimFunding : @storage
                    CADAR;      # mutez : @parameter%reclaimFunding : @storage
                    DIG 2;      # @storage : mutez : @parameter%reclaimFunding
                    DUP;        # @storage : @storage : mutez : @parameter%reclaimFunding
                    DUG 3;      # @storage : mutez : @parameter%reclaimFunding : @storage
                    CAADDR;     # mutez : mutez : @parameter%reclaimFunding : @storage
                    COMPARE;    # int : @parameter%reclaimFunding : @storage
                    EQ;         # bool : @parameter%reclaimFunding : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: self.data.custBal == self.data.custFunding"; # string : @parameter%reclaimFunding : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%reclaimFunding : @storage
                    # sp.send(self.data.custAddr, self.data.custBal) # @parameter%reclaimFunding : @storage
                    NIL operation; # list operation : @parameter%reclaimFunding : @storage
                    DIG 2;      # @storage : list operation : @parameter%reclaimFunding
                    DUP;        # @storage : @storage : list operation : @parameter%reclaimFunding
                    DUG 3;      # @storage : list operation : @parameter%reclaimFunding : @storage
                    CAADAR;     # address : list operation : @parameter%reclaimFunding : @storage
                    CONTRACT unit; # option (contract unit) : list operation : @parameter%reclaimFunding : @storage
                    IF_SOME
                      {}
                      {
                        PUSH int 51; # int : list operation : @parameter%reclaimFunding : @storage
                        FAILWITH;   # FAILED
                      }; # @some : list operation : @parameter%reclaimFunding : @storage
                    DIG 3;      # @storage : @some : list operation : @parameter%reclaimFunding
                    DUP;        # @storage : @storage : @some : list operation : @parameter%reclaimFunding
                    DUG 4;      # @storage : @some : list operation : @parameter%reclaimFunding : @storage
                    CAADDR;     # mutez : @some : list operation : @parameter%reclaimFunding : @storage
                    UNIT;       # unit : mutez : @some : list operation : @parameter%reclaimFunding : @storage
                    TRANSFER_TOKENS; # operation : list operation : @parameter%reclaimFunding : @storage
                    CONS;       # list operation : @parameter%reclaimFunding : @storage
                    # self.data.custBal = sp.tez(0) # list operation : @parameter%reclaimFunding : @storage
                    DIG 2;      # @storage : list operation : @parameter%reclaimFunding
                    DUP;        # @storage : @storage : list operation : @parameter%reclaimFunding
                    CDR;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : @storage : list operation : @parameter%reclaimFunding
                    SWAP;       # @storage : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation : @parameter%reclaimFunding
                    CAR;        # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation : @parameter%reclaimFunding
                    DUP;        # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation : @parameter%reclaimFunding
                    CDR;        # pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation : @parameter%reclaimFunding
                    SWAP;       # pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation : @parameter%reclaimFunding
                    CAR;        # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation : @parameter%reclaimFunding
                    DUP;        # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation : @parameter%reclaimFunding
                    CAR;        # string : pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation : @parameter%reclaimFunding
                    SWAP;       # pair (string %chanID) (pair (address %custAddr) (mutez %custBal)) : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation : @parameter%reclaimFunding
                    CDAR;       # address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation : @parameter%reclaimFunding
                    PUSH mutez 0; # mutez : address : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation : @parameter%reclaimFunding
                    SWAP;       # address : mutez : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation : @parameter%reclaimFunding
                    PAIR;       # pair address mutez : string : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation : @parameter%reclaimFunding
                    SWAP;       # string : pair address mutez : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation : @parameter%reclaimFunding
                    PAIR;       # pair string (pair address mutez) : pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation : @parameter%reclaimFunding
                    PAIR;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation : @parameter%reclaimFunding
                    PAIR;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation : @parameter%reclaimFunding
                    DUG 2;      # list operation : @parameter%reclaimFunding : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                  }
                  {
                    NIL operation; # list operation : @parameter%reclaimFunding : @storage
                  }; # list operation : @parameter%reclaimFunding : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                # if self.data.merchAddr == sp.sender: # list operation : @parameter%reclaimFunding : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                SENDER;     # address : list operation : @parameter%reclaimFunding : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                DIG 3;      # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : address : list operation : @parameter%reclaimFunding
                DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : address : list operation : @parameter%reclaimFunding
                DUG 4;      # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : address : list operation : @parameter%reclaimFunding : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                CDAAR;      # address : address : list operation : @parameter%reclaimFunding : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                COMPARE;    # int : list operation : @parameter%reclaimFunding : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                EQ;         # bool : list operation : @parameter%reclaimFunding : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                IF
                  {
                    # sp.verify(self.data.merchBal == self.data.merchFunding) # list operation : @parameter%reclaimFunding : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    DIG 2;      # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation : @parameter%reclaimFunding
                    DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation : @parameter%reclaimFunding
                    DUG 3;      # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation : @parameter%reclaimFunding : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    CDADDR;     # mutez : list operation : @parameter%reclaimFunding : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    DIG 3;      # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : mutez : list operation : @parameter%reclaimFunding
                    DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : mutez : list operation : @parameter%reclaimFunding
                    DUG 4;      # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : mutez : list operation : @parameter%reclaimFunding : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    CDADAR;     # mutez : mutez : list operation : @parameter%reclaimFunding : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    COMPARE;    # int : list operation : @parameter%reclaimFunding : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    EQ;         # bool : list operation : @parameter%reclaimFunding : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    IF
                      {
                        SWAP;       # @parameter%reclaimFunding : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                        DROP;       # list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                      }
                      {
                        PUSH string "WrongCondition: self.data.merchBal == self.data.merchFunding"; # string : list operation : @parameter%reclaimFunding : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                        FAILWITH;   # FAILED
                      }; # list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    SWAP;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                    # sp.send(self.data.merchAddr, self.data.merchBal) # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                    DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                    DUG 2;      # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    CDAAR;      # address : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    CONTRACT unit; # option (contract unit) : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    IF_SOME
                      {}
                      {
                        PUSH int 55; # int : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                        FAILWITH;   # FAILED
                      }; # @some : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    DIG 2;      # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @some : list operation
                    DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @some : list operation
                    DUG 3;      # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : @some : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    CDADAR;     # mutez : @some : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    UNIT;       # unit : mutez : @some : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    CONS;       # list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    SWAP;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                    # self.data.merchBal = sp.tez(0) # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                    DUP;        # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                    CAR;        # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                    SWAP;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                    CDR;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                    DUP;        # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                    CDR;        # pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                    SWAP;       # pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                    CAR;        # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                    DUP;        # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                    CAR;        # address : pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                    SWAP;       # pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding)) : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                    CDDR;       # mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                    PUSH mutez 0; # mutez : mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                    PAIR;       # pair mutez mutez : address : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                    SWAP;       # address : pair mutez mutez : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                    PAIR;       # pair address (pair mutez mutez) : pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                    PAIR;       # pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : list operation
                    SWAP;       # pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry))) : pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))) : list operation
                    PAIR;       # pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status)))) : list operation
                    SWAP;       # list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                  }
                  {
                    SWAP;       # @parameter%reclaimFunding : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                    DROP;       # list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
                  }; # list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair (int %selfDelay) (string %status))))
              }; # list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)))
          }; # list operation : pair (pair (pair (string %chanID) (pair (address %custAddr) (mutez %custBal))) (pair mutez (pair key timestamp))) (pair (pair (address %merchAddr) (pair (mutez %merchBal) (mutez %merchFunding))) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)))
      }; # list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)))
    NIL operation; # list operation : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)))
    SWAP;       # list operation : list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)))
    ITER
      {
        CONS;       # list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)))
      }; # list operation : pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string)))
    PAIR;       # pair (list operation) (pair (pair (pair string (pair address mutez)) (pair (mutez %custFunding) (pair (key %custPk) (timestamp %delayExpiry)))) (pair (pair address (pair mutez mutez)) (pair (pair (key %merchPk) (bytes %revLock)) (pair int string))))
  };