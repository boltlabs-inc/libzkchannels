parameter (pair (pair (pair (string %chanID) (pair (mutez %custBal) (string %g2))) (pair (contract %k (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid)))) (pair (mutez %merchBal) (string %merchPk0)))) (pair (pair (string %merchPk1) (pair (string %merchPk2) (string %merchPk3))) (pair (pair (string %merchPk4) (bytes %revLock)) (pair (string %s1) (string %s2)))));
storage   unit;
code
  {
    DUP;        # pair @parameter @storage : pair @parameter @storage
    CDR;        # @storage : pair @parameter @storage
    SWAP;       # pair @parameter @storage : @storage
    CAR;        # @parameter : @storage
    # == run ==
    # dummy = sp.local("dummy", params.s1 + params.s2) # @parameter : @storage
    DUP;        # @parameter : @parameter : @storage
    CDDDDR;     # string : @parameter : @storage
    SWAP;       # @parameter : string : @storage
    DUP;        # @parameter : @parameter : string : @storage
    DUG 2;      # @parameter : string : @parameter : @storage
    CDDDAR;     # string : string : @parameter : @storage
    CONCAT;     # string : @parameter : @storage
    # out = sp.local("out", False)
    # if sp.len(dummy.value) > 5: # string : @parameter : @storage
    SIZE;       # nat : @parameter : @storage
    PUSH nat 5; # nat : nat : @parameter : @storage
    COMPARE;    # int : @parameter : @storage
    LT;         # bool : @parameter : @storage
    IF
      {
        # out.value = True # @parameter : @storage
        PUSH bool True; # bool : @parameter : @storage
      }
      {
        # out.value = False # @parameter : @storage
        PUSH bool False; # bool : @parameter : @storage
      }; # bool : @parameter : @storage
    # if out.value: # bool : @parameter : @storage
    IF
      {
        # sp.transfer(sp.record(newCustBal = params.custBal, newMerchBal = params.merchBal, newRevLock = params.revLock, valid = True), sp.tez(0), params.k) # @parameter : @storage
        DUP;        # @parameter : @parameter : @storage
        CADAR;      # contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : @parameter : @storage
        NIL operation; # list operation : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : @parameter : @storage
        SWAP;       # contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @parameter : @storage
        PUSH mutez 0; # mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @parameter : @storage
        PUSH bool True; # bool : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @parameter : @storage
        DIG 4;      # @parameter : bool : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @storage
        DUP;        # @parameter : @parameter : bool : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @storage
        DUG 5;      # @parameter : bool : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @parameter : @storage
        CDDADR;     # bytes : bool : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @parameter : @storage
        PAIR %newRevLock %valid; # pair (bytes %newRevLock) (bool %valid) : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @parameter : @storage
        DIG 4;      # @parameter : pair (bytes %newRevLock) (bool %valid) : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @storage
        DUP;        # @parameter : @parameter : pair (bytes %newRevLock) (bool %valid) : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @storage
        CADDAR;     # mutez : @parameter : pair (bytes %newRevLock) (bool %valid) : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @storage
        SWAP;       # @parameter : mutez : pair (bytes %newRevLock) (bool %valid) : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @storage
        CAADAR;     # mutez : mutez : pair (bytes %newRevLock) (bool %valid) : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @storage
        PAIR %newCustBal %newMerchBal; # pair (mutez %newCustBal) (mutez %newMerchBal) : pair (bytes %newRevLock) (bool %valid) : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @storage
        PAIR;       # pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid)) : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @storage
        TRANSFER_TOKENS; # operation : list operation : @storage
        CONS;       # list operation : @storage
      }
      {
        # sp.transfer(sp.record(newCustBal = params.custBal, newMerchBal = params.merchBal, newRevLock = params.revLock, valid = False), sp.tez(0), params.k) # @parameter : @storage
        DUP;        # @parameter : @parameter : @storage
        CADAR;      # contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : @parameter : @storage
        NIL operation; # list operation : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : @parameter : @storage
        SWAP;       # contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @parameter : @storage
        PUSH mutez 0; # mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @parameter : @storage
        PUSH bool False; # bool : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @parameter : @storage
        DIG 4;      # @parameter : bool : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @storage
        DUP;        # @parameter : @parameter : bool : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @storage
        DUG 5;      # @parameter : bool : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @parameter : @storage
        CDDADR;     # bytes : bool : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @parameter : @storage
        PAIR %newRevLock %valid; # pair (bytes %newRevLock) (bool %valid) : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @parameter : @storage
        DIG 4;      # @parameter : pair (bytes %newRevLock) (bool %valid) : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @storage
        DUP;        # @parameter : @parameter : pair (bytes %newRevLock) (bool %valid) : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @storage
        CADDAR;     # mutez : @parameter : pair (bytes %newRevLock) (bool %valid) : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @storage
        SWAP;       # @parameter : mutez : pair (bytes %newRevLock) (bool %valid) : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @storage
        CAADAR;     # mutez : mutez : pair (bytes %newRevLock) (bool %valid) : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @storage
        PAIR %newCustBal %newMerchBal; # pair (mutez %newCustBal) (mutez %newMerchBal) : pair (bytes %newRevLock) (bool %valid) : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @storage
        PAIR;       # pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid)) : mutez : contract (pair (pair (mutez %newCustBal) (mutez %newMerchBal)) (pair (bytes %newRevLock) (bool %valid))) : list operation : @storage
        TRANSFER_TOKENS; # operation : list operation : @storage
        CONS;       # list operation : @storage
      }; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };