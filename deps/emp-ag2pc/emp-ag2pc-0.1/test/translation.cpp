#include "tokens/translation.h"
#include "emp-tool/utils/utils.h"
#include <iostream>

using namespace std;
using namespace emp;

void test_translate_constants() {
    bool *in = new bool[5222];
    int pos = translate_constants(in, 0);
    assert(pos == 5222);
    string res = "";
    for(int i = 0; i < 5222; ++i)
        res += (in[i]?"1":"0");
    assertres);
}

void test_translate_uint32() {
    //0x0c8dda80 0x1001c9a5 0x5f720c5f 0x379ce09e 0x42416780 0xf98fef79 0x00bd26b3 0x72b81850
    uint32_t x[8];
    x[0] = 0x0c8dda80;
    x[1] = 0x1001c9a5;
    x[2] = 0x5f720c5f;
    x[3] = 0x379ce09e;
    x[4] = 0x42416780;
    x[5] = 0xf98fef79;
    x[6] = 0x00bd26b3;
    x[7] = 0x72b81850;
    bool *in = new bool[256];
    int pos = translate_general(x, 8, in, 0);
    assert(pos == 256);
    string res = "";
    for(int i = 160; i < 192; ++i)
        res += (in[i]?"1":"0");
    cout << res << endl;
//    cout << hex_to_binary("0c8dda801001c9a55f720c5f379ce09e42416780f98fef7900bd26b372b81850") << endl;
//    assert(hex_to_binary("0c8dda80") == res);
}

void test_bin_to_uint() {
 //10011110111101111111000110011111
    char one = '1';

    bool *out = new bool[32];
    string tmp = "10011110111101111111000110011111";
    for(int i = 0; i < tmp.length(); ++i)
        out[i] = (tmp[i] == one);
    uint32_t x = bool_to_int<uint32_t>(out, 32);
    cout << x << endl;
}

int main(int argc, char** argv) {
    test_translate_constants();
    test_translate_uint32();
    test_bin_to_uint();
}

//0000000101011011101100010011000010100101100100111000000000001000111110100011000001001110111110100111100100000111001110011110110000000001111001101000001001000010100111101111011111110001100111111100110101100100101111010000000000001010000110000001110101001110
//0000000101011011101100010011000010100101100100111000000000001000111110100011000001001110111110100111100100000111001110011110110000000001111001101000001001000010100111101111011111110001100111111100110101100100101111010000000000001010000110000001110101001110
//0000000101011011101100010011000010100101100100111000000000001000111110100011000001001110111110100111100100000111001110011110110000000001111001101000001001000010100111101111011111110001100111111100110101100100101111010000000000001010000110000001110101001110